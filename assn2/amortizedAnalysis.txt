1. How many cost units are spent in the entire process of performing 32 consecutive push
operations on an empty array which starts out at capacity 8, assuming that the array
will double in capacity each time a new item is added to an already full dynamic array?
As N (ie. the number of pushes) grows large, under this strategy for resizing, what is
the big-oh complexity for a push?

8 ops:   8 units
1 op:    9 units    new capacity: 16
7 ops:	 7 units
1 op:   17 units    new capacity: 32
15 ops: 15 units

Total cost:   8 + 9 + 7 + 17 + 15 = 56 units
Average cost: 56 units / 32 ops = 1.75 units/op

Push operation runs in O(1)+ time.


2. How many cost units are spent in the entire process of performing 32 consecutive push
operations on an empty array which starts out at capacity 8, assuming that the array
will grow by a constant 2 spaces each time a new item is added to an already full
dynamic array? As N (ie. the number of pushes) grows large, under this strategy for
resizing, what is the big-oh complexity for a push?

# Ops    Cost

8 ops:	 8 units
1 op:	 9 units
1 op:	 1 unit
1 op:	11 units
1 op:	 1 unit
1 op:	13 units
1 op:	 1 unit
1 op:	15 units
1 op:	 1 unit
1 op:	17 units
1 op:	 1 unit
1 op:	19 units
1 op:	 1 unit
1 op:	21 units
1 op:	 1 unit
1 op:	23 units
1 op:	 1 unit
1 op:	25 units
1 op:	 1 unit
1 op:	27 units
1 op:	 1 unit
1 op:	29 units
1 op:	 1 unit
1 op:	31 units
1 op:	 1 unit

Total:  12 + 8 + 9 + 11 + 13 + 15 + 17 + 19 + 21 + 23 + 25 + 27 + 29 + 31
      = 260 units

Rough cost of n/2 units per push operation = O(n)


3. Suppose that a dynamic array stack doubles its capacity when it is full, and shrinks
(on Pop only) its capacity by half when the array is half full or less. Can you devise
a sequence of N push() and pop() operations which will result in poor performance
(O(N^2) total cost)? How might you adjust the array's shrinking policy to avoid this?
(Hint: You may assume that the initial capacity of the array is N/2.)

Oscillate between pushing and popping starting with initial size of array N/2:
push, pop, push, pop, push, pop... total of N ops
Since both shrinking and growing the array have a cost of N units, the total cost
would be N * N units = O(n)

Note: This dilemma could be solved by shrinking the array by a factor of 1/2
whenever the array is 1/4 full (assuming the array has at least 1 element).
